devtools::load_all(".")
setLazyDir("~/lazyDir")
lazyLoad2("a")
y
md5Hash <- lazyLs(tag=y, archivistCol="artifact", lazyDir=lazyDir)
md5Hash
devtools::load_all(".")
setLazyDir("~/lazyDir")
lazySave(a)
lazyLs()
lazyRm("a")
lazyLs()
lazyRm("\"a\"")
lazyLs()
lazySave(a)
lazyLs()
lazySave(a, clearRepo = TRUE)
ls()
library(lazyR)
install.packages("git2r")
remove.packages("devtools", lib="~/R/win-library/3.2")
install.packages("git2r")
install.packages("devtools")
library(lazyR)
devtools::load_all(".")
library(lazyR)
library(magrittr)
a = Sys.time()
## Set options
os = tolower(Sys.info()[["sysname"]])
maps.dir = if (Sys.info()["sysname"]=="Linux") {
"/mnt/A105254/shared/data"
} else if (Sys.info()["sysname"]=="Windows") {
if (Sys.getenv("computername")=="L-VIC-A105192") {
"C:/shared"
} else {
"//W-VIC-A105254/shared/data"
}
} else if (Sys.info()["sysname"]=="Darwin") {
"~/Documents/shared"
}
if(!file.exists(maps.dir)) stop("maps.dir does not exist.")
if(Sys.getenv("computername")=="W-VIC-A105200" | Sys.getenv("computername")=="W-VIC-A120752" |
Sys.info()["nodename"]=="W-VIC-A105342" | Sys.info()["nodename"]=="W-VIC-A105343" |
Sys.info()["nodename"]=="W-VIC-A105388" | Sys.getenv("computername")=="L-VIC-A105192") {
#dev_mode(TRUE)
load_all("~/Documents/GitHub/SpaDES")
} else {
install_github("PredictiveEcology/SpaDES", ref="development")
library(SpaDES)
}
## load packages and helper functions
raw_GitHub <- "https://raw.githubusercontent.com/"
repo_imaps <- "achubaty/interactive-maps"
branch_imaps <- "master"
repo_SpaDES <- "PredictiveEcology/SpaDES"
branch_SpaDES <- "development"
# interactive-maps//init.R -- libraries
paste0(raw_GitHub, repo_imaps, "/", branch_imaps, "/R/init.R") %>%
source_url(.)
# interactive-maps//polygons.R -- helper functions
paste0(raw_GitHub, repo_imaps, "/", branch_imaps, "/R/polygons.R") %>%
source_url(.)
# interactive-maps//rasters.R -- helper functions
paste0(raw_GitHub, repo_imaps, "/", branch_imaps, "/R/rasters.R") %>%
source_url(.)
# McIntire-lab//lazyR
devtools::load_github("PredictiveEcology/lazyR")
# SpaDES//thinSpatialPolygons.R -- helper function
paste0(raw_GitHub, repo_SpaDES, "/", branch_SpaDES,
"/_ignore/thinSpatialPolygons.R") %>%
source_url(.)
## load all lazy databases in the data directory
lazyDBs <- dir(maps.dir, full.names = TRUE, recursive = TRUE, pattern = "rdx$")  %>%
strsplit(., split=".rdx") %>%
unlist %>%
sapply(., lazyLoad, envir = .GlobalEnv)
reRunAll <- TRUE
## Helper functions
lsLL <- function(FP) {
e <- new.env() ;
lsLL <- lazyLoad(FP, envir=e) %>% ls(envir=e);
rm(e)
return(lsLL)
}
cacheFunctions <- function(useCache=TRUE, dir="~/spadesTmp/cacheFunctions") {
# for slow functions, add cached versions. Then use sim$xxx() throughout module instead of xxx()
# Step 1 - create a location for the cached data
sim <- list()
if(useCache) {
sim$cacheLoc <- dir
# Step 1a - check whether that location already exists
if(!dir.exists(sim$cacheLoc) ) {
# Step 1b - if not, create it
archivist::createEmptyRepo(dir)
}
# Step 2 - create a version of every function that is slow that includes the caching implicitly
sim$getOGR <- function(...) archivist::cache(cacheRepo=sim$cacheLoc, FUN=getOGR, ...)
sim$gIntersection <- function(...) archivist::cache(cacheRepo=sim$cacheLoc, FUN=rgeos::gIntersection, ...)
sim$mask <- function(...) archivist::cache(cacheRepo=sim$cacheLoc, FUN=raster::mask, ...)
sim$crop <- function(...) archivist::cache(cacheRepo=sim$cacheLoc, FUN=raster::crop, ...)
sim$projectRaster <- function(...) archivist::cache(cacheRepo=sim$cacheLoc, FUN=raster::projectRaster, ...)
sim$spTransform <- function(...) archivist::cache(cacheRepo=sim$cacheLoc, FUN=sp::spTransform,  ...)
} else {
# Step 3 - create a non-caching version in case caching is not desired
sim$getOGR <- getOGR
sim$gIntersection <- rgeos::gIntersection
sim$mask <- raster::mask
sim$crop <- raster::crop
sim$projectRaster <- raster::projectRaster
sim$spTransform <- sp::spTransform
}
return(invisible(sim))
}
sim <- cacheFunctions(useCache=TRUE)
setLazyDir("//W-VIC-A105254/shared/data/lazyDir")
lazySave(divPolyLccCRS, tags="maps", clearRepo = TRUE)
lazySave(divPolyAgeCRS, tags="maps")
ls()
rm(list = ls())
ls()
library(lazyR)
devtools::load_all(".")
lazySave(divPolyLccCRS, tags="maps", clearRepo = TRUE)
lazyDBs <- dir(maps.dir, full.names = TRUE, recursive = TRUE, pattern = "rdx$")  %>%
strsplit(., split=".rdx") %>%
unlist %>%
sapply(., lazyLoad, envir = .GlobalEnv)
library(magrittr)
a = Sys.time()
## Set options
os = tolower(Sys.info()[["sysname"]])
maps.dir = if (Sys.info()["sysname"]=="Linux") {
"/mnt/A105254/shared/data"
} else if (Sys.info()["sysname"]=="Windows") {
if (Sys.getenv("computername")=="L-VIC-A105192") {
"C:/shared"
} else {
"//W-VIC-A105254/shared/data"
}
} else if (Sys.info()["sysname"]=="Darwin") {
"~/Documents/shared"
}
if(!file.exists(maps.dir)) stop("maps.dir does not exist.")
if(Sys.getenv("computername")=="W-VIC-A105200" | Sys.getenv("computername")=="W-VIC-A120752" |
Sys.info()["nodename"]=="W-VIC-A105342" | Sys.info()["nodename"]=="W-VIC-A105343" |
Sys.info()["nodename"]=="W-VIC-A105388" | Sys.getenv("computername")=="L-VIC-A105192") {
#dev_mode(TRUE)
load_all("~/Documents/GitHub/SpaDES")
} else {
install_github("PredictiveEcology/SpaDES", ref="development")
library(SpaDES)
}
## load packages and helper functions
raw_GitHub <- "https://raw.githubusercontent.com/"
repo_imaps <- "achubaty/interactive-maps"
branch_imaps <- "master"
repo_SpaDES <- "PredictiveEcology/SpaDES"
branch_SpaDES <- "development"
# interactive-maps//init.R -- libraries
paste0(raw_GitHub, repo_imaps, "/", branch_imaps, "/R/init.R") %>%
source_url(.)
# interactive-maps//polygons.R -- helper functions
paste0(raw_GitHub, repo_imaps, "/", branch_imaps, "/R/polygons.R") %>%
source_url(.)
# interactive-maps//rasters.R -- helper functions
paste0(raw_GitHub, repo_imaps, "/", branch_imaps, "/R/rasters.R") %>%
source_url(.)
# McIntire-lab//lazyR
devtools::load_github("PredictiveEcology/lazyR")
# SpaDES//thinSpatialPolygons.R -- helper function
paste0(raw_GitHub, repo_SpaDES, "/", branch_SpaDES,
"/_ignore/thinSpatialPolygons.R") %>%
source_url(.)
## load all lazy databases in the data directory
lazyDBs <- dir(maps.dir, full.names = TRUE, recursive = TRUE, pattern = "rdx$")  %>%
strsplit(., split=".rdx") %>%
unlist %>%
sapply(., lazyLoad, envir = .GlobalEnv)
reRunAll <- TRUE
setLazyDir("//W-VIC-A105254/shared/data/lazyDir")
getwd()
lazySave(divPolyLccCRS, tags="maps", clearRepo = TRUE)
lazySave(divPolyAgeCRS, tags="maps")
lazySave(divPolyLccCRS, tags="maps", clearRepo = TRUE)
devtools::load_all(".")
setLazyDir("//W-VIC-A105254/shared/data/lazyDir")
devtools::load_all(".")
setLazyDir("//W-VIC-A105254/shared/data/lazyDir")
lazyLs(tag="maps")
rm(divPolyAgeCRS, divPolyLccCRS, divPolyBorealCRS, roadsDivAgeCRS)
lazyLoad2(lazyLs(tag="maps"))
dev();Plot(divPolyAgeCRS)
crs(divPolyAgeCRS)
sapply(ls(), class)
sapply(ls(), function(x) get(x) %>% class)
crs(ageBorealAgeCRS)
crs(studyAreaPolyLccCRS)
sapply(ls(), function(x) is(get(x), ".spatialObjects")
)
lazySave(ageDivLccCRS)
devtools::load_all(".")
lazyRm("ageDivLccCRS")
setLazyDir("//W-VIC-A105254/shared/data/lazyDir")
lazyRm("ageDivLccCRS")
lazyLs()
lazySave(ageDivLccCRS)
nchar(slot(slot(obj, "file"), "name"))
slot(obj, "file")
slot(slot(obj, "file"), "name")
lazyLs(tag=paste0(file), archivistCol = "artifact")
file
objList
slot(slot(obj, "file"), "name")
?archivist
devtools::load_all(".")
lazySave(ageDivLccCRS)
setLazyDir("//W-VIC-A105254/shared/data/lazyDir")
lazySave(divPolyLccCRS, tags="maps", clearRepo = TRUE)
obj
is(obj, ".spatialObject")
is(obj, ".spatialObjects")
devtools::load_all(".")
setLazyDir("//W-VIC-A105254/shared/data/lazyDir")
lazySave(divPolyLccCRS, tags="maps", clearRepo = TRUE)
lazyLs("crs")
lazyLs("crs", archivistCol = "tag")
lazyLs("crs", archivistCol = "tags")
lazyLs("crs", archivistCol = "tag")
lazyLs(tagType = "crs:")
lazySave(divPolyAgeCRS, tags="maps")
function(N) {
load_all("~/GitHub/lazyR")
setLazyDir("//W-VIC-A105254/shared/data/lazyDir")
load_all("~/GitHub/lazyR")
setLazyDir("//W-VIC-A105254/shared/data/lazyDir")
getwd()
lazySave(divPolyLccCRS, tags="maps", clearRepo = TRUE)
lazySave(divPolyAgeCRS, tags="maps")
lazySave(divPolyBorealCRS, tags="maps")
lazySave(roadsDivAgeCRS, tags="maps")
lazySave(studyRegion)
lazyLs(tag=".spatialObjects")
lazyLs(tag="SpatialPolygons")
lazyLs(tag="Raster")
lazyRm("d", exact=FALSE)
devtools::load_all(".")
load_all("~/GitHub/lazyR")
setLazyDir("//W-VIC-A105254/shared/data/lazyDir")
getwd()
# Save objects
lazySave(divPolyLccCRS, tags="maps", clearRepo = TRUE)
lazySave(divPolyAgeCRS, tags="maps")
lazySave(divPolyBorealCRS, tags="maps")
lazySave(roadsDivAgeCRS, tags="maps")
lazySave(studyRegion)
lazyLs(tag=".spatialObjects")
lazyLs(tag="SpatialPolygons")
lazyLs(tag="Raster")
lazyLs(tag="maps")
lazyLs()
lazyRm("d", exact=FALSE)
lazySave(divPolyLccCRS, tags="maps", clearRepo = TRUE)
lazySave(divPolyAgeCRS, tags="maps")
lazySave(divPolyBorealCRS, tags="maps")
lazySave(roadsDivAgeCRS, tags="maps")
lazySave(studyRegion)
lazyLs(tag=".spatialObjects")
lazyLs(tag="SpatialPolygons")
lazyLs(tag="Raster")
lazyLs(tag="maps")
lazyLs()
lazyRm("d", exact=TRUE)
lazyRm("divPoly", exact=TRUE)
lazyRm("divPoly", exact=FALSE)
load_all("~/GitHub/lazyR")
setLazyDir("//W-VIC-A105254/shared/data/lazyDir")
lazySave(divPolyLccCRS, tags="maps", clearRepo = TRUE)
lazySave(divPolyAgeCRS, tags="maps")
lazySave(divPolyBorealCRS, tags="maps")
lazySave(roadsDivAgeCRS, tags="maps")
lazySave(studyRegion)
# list what is in the lazy load db
lazyLs(tag=".spatialObjects")
lazyLs(tag="SpatialPolygons")
lazyLs(tag="Raster")
lazyLs(tag="maps")
lazyLs()
lazyRm("d", exact=TRUE)
y
exact
lazyRm("divPoly", exact=FALSE)
y
toRm
y
toRm
z <- lazyLs(y, archivistCol = "artifact", lazyDir=lazyDir, exact=exact)
z
devtools::load_all(".")
length(z)>0
devtools::load_all(".")
setLazyDir("//W-VIC-A105254/shared/data/lazyDir")
getwd()
# Save objects
lazySave(divPolyLccCRS, tags="maps", clearRepo = TRUE)
lazySave(divPolyAgeCRS, tags="maps")
lazySave(divPolyBorealCRS, tags="maps")
lazySave(roadsDivAgeCRS, tags="maps")
lazySave(studyRegion)
# list what is in the lazy load db
lazyLs(tag=".spatialObjects")
lazyLs(tag="SpatialPolygons")
lazyLs(tag="Raster")
lazyLs(tag="maps")
lazyLs()
lazyRm("d", exact=TRUE)
lazyRm("divPoly", exact=FALSE)
z
devtools::load_all(".")
setLazyDir("//W-VIC-A105254/shared/data/lazyDir")
getwd()
# Save objects
lazySave(divPolyLccCRS, tags="maps", clearRepo = TRUE)
lazySave(divPolyAgeCRS, tags="maps")
lazySave(divPolyBorealCRS, tags="maps")
lazySave(roadsDivAgeCRS, tags="maps")
lazySave(studyRegion)
# list what is in the lazy load db
lazyLs(tag=".spatialObjects")
lazyLs(tag="SpatialPolygons")
lazyLs(tag="Raster")
lazyLs(tag="maps")
lazyLs()
lazyRm("d", exact=TRUE)
lazyRm("divPoly", exact=FALSE)
z
toRm
lazyLs(toRm)
toRm
lazyLs(toRm)
showLocalRepo(repoDir=lazyDir, method="tags") %>%
filter(artifact==z) %>%
filter(grepl("filename:", tag)) %>%
select(tag)
showLocalRepo(repoDir=lazyDir, method="tags") %>%
filter(artifact==z)
showLocalRepo(repoDir=lazyDir) %>%
filter(artifact==z)
showLocalRepo(repoDir=lazyDir)
toRm
z <- lazyLs(y, archivistCol = "artifact", lazyDir=lazyDir, exact=exact)
z
devtools::load_all(".")
load_all("~/GitHub/lazyR")
setLazyDir("//W-VIC-A105254/shared/data/lazyDir")
lazySave(divPolyLccCRS, tags="maps", clearRepo = TRUE)
lazySave(divPolyAgeCRS, tags="maps")
lazySave(divPolyBorealCRS, tags="maps")
lazySave(roadsDivAgeCRS, tags="maps")
lazySave(studyRegion)
# list what is in the lazy load db
lazyLs(tag=".spatialObjects")
lazyLs(tag="SpatialPolygons")
lazyLs(tag="Raster")
lazyLs(tag="maps")
lazyLs()
lazyRm("divPoly", exact=FALSE)
showLocalRepo(toRm)
toRm
showLocalRepo()
showLocalRepo() %>% filter(md5hash==toRm)
showLocalRepo(method="tags") %>% filter(md5hash==toRm) %>%
showLocalRepo(method="tags") %>% filter(md5hash==toRm)
showLocalRepo(method="tags")
showLocalRepo(method="tags") %>% filter_("artifact"==toRm)
showLocalRepo(method="tags") %>% filter(artifact==toRm)
showLocalRepo(method="tags") %>% filter(artifact==toRm) %>% select(grep("objectName:", tag)
)
showLocalRepo(method="tags") %>% filter(artifact==toRm)
showLocalRepo(method="tags") %>% filter(artifact==toRm) %>% select(grepl("objectName:", tag))
showLocalRepo(method="tags") %>% filter(artifact==toRm) %>% select(grepl(pattern="objectName:", tag))
showLocalRepo(method="tags") %>% filter(artifact==toRm) %>% filter(grepl(pattern="objectName:", tag))
showLocalRepo(method="tags") %>%
filter(artifact==toRm) %>%
filter(grepl(pattern="objectName:", tag)) %>%
gsub(.$tag, pattern="objectName:", replacement="")
showLocalRepo(method="tags") %>%
filter(artifact==toRm) %>%
filter(grepl(pattern="objectName:", tag)) %>%
select(tags %>%)
gsub(.$tag, pattern="objectName:", replacement="")
showLocalRepo(method="tags") %>%
filter(artifact==toRm) %>%
filter(grepl(pattern="objectName:", tag)) %>%
select(tags) %>%
gsub(.$tag, pattern="objectName:", replacement="")
showLocalRepo(method="tags") %>%
filter(artifact==toRm) %>%
filter(grepl(pattern="objectName:", tag)) %>%
select_("tag") %>%
gsub(.$tag, pattern="objectName:", replacement="")
devtools::load_all(".")
setLazyDir("//W-VIC-A105254/shared/data/lazyDir")
lazySave(divPolyLccCRS, tags="maps", clearRepo = TRUE)
lazySave(divPolyAgeCRS, tags="maps")
lazySave(divPolyBorealCRS, tags="maps")
lazySave(roadsDivAgeCRS, tags="maps")
lazySave(studyRegion)
# list what is in the lazy load db
lazyLs(tag=".spatialObjects")
lazyLs(tag="SpatialPolygons")
lazyLs(tag="Raster")
lazyLs(tag="maps")
lazyLs()
lazyRm("divPoly", exact=FALSE)
toRm
lazyObjectName(toRm)
setLazyDir("//W-VIC-A105254/shared/data/lazyDir")
getwd()
# Save objects
lazySave(divPolyLccCRS, tags="maps", clearRepo = TRUE)
lazySave(divPolyAgeCRS, tags="maps")
lazySave(divPolyBorealCRS, tags="maps")
lazySave(roadsDivAgeCRS, tags="maps")
lazySave(studyRegion)
# list what is in the lazy load db
lazyLs(tag=".spatialObjects")
lazyLs(tag="SpatialPolygons")
lazyLs(tag="Raster")
lazyLs(tag="maps")
lazyLs()
lazyRm("divPoly", exact=FALSE)
lazyObjectName(toRm)
setLazyDir("//W-VIC-A105254/shared/data/lazyDir")
load_all("~/GitHub/lazyR")
setLazyDir("//W-VIC-A105254/shared/data/lazyDir")
lazySave(divPolyLccCRS, tags="maps", clearRepo = TRUE)
lazySave(divPolyAgeCRS, tags="maps")
lazySave(divPolyBorealCRS, tags="maps")
lazySave(roadsDivAgeCRS, tags="maps")
lazySave(studyRegion)
lazyLs(tag=".spatialObjects")
lazyLs(tag="SpatialPolygons")
lazyLs(tag="Raster")
lazyLs(tag="maps")
lazyLs()
lazyRm("divPoly", exact=FALSE)
lazyObjectName(toRm)
toRm
devtools::load_all(".")
setLazyDir("//W-VIC-A105254/shared/data/lazyDir")
lazyRm("divPoly", exact=FALSE)
lazyObjectName(toRm)
md5Hash
showLocalRepo(method="tags")
showLocalRepo(method="tags") %>%
filter(artifact==md5Hash)
showLocalRepo(method="tags") %>%
filter(artifact==md5Hash) %>%
filter(grepl(pattern="objectName:", tag))
showLocalRepo(method="tags") %>%
filter(artifact==md5Hash) %>%
filter(grepl(pattern="objectName:", tag)) %>%
select_("tag")
lazyObjectName <- showLocalRepo(method="tags") %>%
filter(artifact==md5Hash) %>%
filter(grepl(pattern="objectName:", tag)) %>%
select_("tag") %>%
gsub(.$tag, pattern="objectName:", replacement="")
lazyObjectName
devtools::load_all(".")
setLazyDir("//W-VIC-A105254/shared/data/lazyDir")
lazyRm("divPoly", exact=FALSE)
lazyObjectName(toRm)
y
file.path(lazyDir, "gallery", paste0(toRm, ".rdb"))
ObjName <- lazyObjectName(toRm)
devtools::load_all(".")
setLazyDir("//W-VIC-A105254/shared/data/lazyDir")
lazyRm("divPoly", exact=FALSE)
devtools::load_all(".")
setLazyDir("//W-VIC-A105254/shared/data/lazyDir")
lazySave(divPolyLccCRS, tags="maps", clearRepo = TRUE)
lazySave(divPolyAgeCRS, tags="maps")
lazySave(divPolyBorealCRS, tags="maps")
lazySave(roadsDivAgeCRS, tags="maps")
lazySave(studyRegion)
lazyLs(tag=".spatialObjects")
lazyLs(tag="SpatialPolygons")
lazyLs(tag="Raster")
lazyLs(tag="maps")
lazyRm("divPoly", exact=FALSE)
lazyLs()
lazyRm("d", exact=TRUE)
lazyRm("divPoly", exact=TRUE)
lazyRm(lazyLs("maps"))
lazySave(divPolyLccCRS, tags="maps")
lazySave(divPolyAgeCRS, tags="maps")
lazySave(divPolyBorealCRS, tags="maps")
lazySave(roadsDivAgeCRS, tags="maps")
load_all("~/GitHub/lazyR")
setLazyDir("//W-VIC-A105254/shared/data/lazyDir")
lazySave(divPolyLccCRS, tags="maps")
lazySave(divPolyAgeCRS, tags="maps")
lazySave(divPolyBorealCRS, tags="maps")
lazySave(roadsDivAgeCRS, tags="maps")
lazyLs(tag=".spatialObjects")
lazyLs(tag="crs")
lazyLs(tag="crs=aea")
lazyLs(tag="aea")
lazyLs(tag="aea", exact=TRUE)
load_all("~/GitHub/SpaDES")
