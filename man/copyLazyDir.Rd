% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/lazyR.R
\docType{methods}
\name{copyLazyDir}
\alias{copyLazyDir}
\title{Copy a lazyDir and all the files in it}
\usage{
copyLazyDir(oldLazyDir = NULL, newLazyDir = NULL, useRobocopy = TRUE,
  overwrite = TRUE, create = TRUE, silent = FALSE)
}
\arguments{
\item{oldLazyDir}{The source lazyDir}

\item{newLazyDir}{The new lazyDir}

\item{useRobocopy}{For Windows, this will use a system call to Robocopy which appears to be much
faster than the internal \code{file.copy} function. Uses /MIR flag.}

\item{overwrite}{Passed to \code{file.copy}}

\item{create}{Passed to \code{checkLazyDir}}

\item{silent}{Should a progress be printed}
}
\description{
This will copy an entire lazyDir to a new location. This can be useful
for copying everything to a new computer, a network location etc.
}
\note{
This function is essential to use, instead of just using the operating
system copying directly, when \code{Raster*} objects are involved.
\code{Raster*} objects have a file location as a backbone for the R object.
This must not only be copied to the new location, but also the filename referenced
within the \code{Raster} object must be updated to the new location.
Because \code{Raster*} objects encode absolute paths, the original
file must be visible before copying to the new path.

Because absolute paths are stored within R objects, like \code{Raster*}
objects, a network location may create undesired breakages unless
all machines have the same mapping to that network location.
}
\examples{
\dontrun{
library(raster)
library(rgdal)
# make some objects
obj1 <- 1:10
obj2 <- 11:20
r <- raster::raster(matrix(1:9, ncol=3))
raster::writeRaster(r, file.path(tempdir(),"r.tif"), overwrite=TRUE)
rm(r)
r <- raster::raster(file.path(tempdir(),"r.tif"))

# identify a new and old lazyLoad db
oldLazyDir <- file.path(tempdir(), "old")
newLazyDir <- file.path(tempdir(), "new")
lazySave(obj1, obj2, r, lazyDir=oldLazyDir, overwrite=TRUE)

# copy to new lazyDir location
copyLazyDir(oldLazyDir, newLazyDir)

# remove the objects in memory and the old lazyLoad db
rm(obj1, obj2, r)
unlink(oldLazyDir, recursive=TRUE)

lazyLoad2(lazyDir=newLazyDir) # Objects should be visible after this
ls()
unlink(newLazyDir, recursive=TRUE)
}
}
\author{
Eliot McIntire
}

